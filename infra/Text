import bpy
import random
import string
from mathutils import Vector
from math import radians
import os

# Exclude 'Q' from the character set
ALPHANUMERIC_CHARS = ''.join(c for c in (string.ascii_uppercase + string.digits) if c != 'Q')

def generate_unique_id(length=4):
    return "M." + ''.join(random.choices(ALPHANUMERIC_CHARS, k=length))

def get_target_object(name="Murgagon"):
    target = bpy.data.objects.get(name)
    if target is None:
        raise ValueError(f"Object named '{name}' not found.")
    return target

def get_bottom_center(obj):
    corners = [obj.matrix_world @ Vector(corner) for corner in obj.bound_box]
    min_z = min(corner.z for corner in corners)
    avg_x = sum(corner.x for corner in corners) / 8.0
    avg_y = sum(corner.y for corner in corners) / 8.0
    return Vector((avg_x, avg_y, min_z))

def create_text_object(text, target_location, extrusion=0.1, scale=1.20):
    bpy.ops.object.text_add()
    text_obj = bpy.context.active_object
    text_obj.data.body = text
    text_obj.data.extrude = extrusion
    text_obj.name = "TextID"
    text_obj.scale = (scale, scale, scale)
    text_obj.rotation_euler = (radians(180), 0, 33)  # Face down

    bpy.ops.object.convert(target='MESH')
    
    bbox = [Vector(b) for b in text_obj.bound_box]
    local_center = sum(bbox, Vector()) / 8.0
    world_center = text_obj.matrix_world @ local_center
    
    offset = target_location - world_center
    text_obj.location += offset

    return text_obj


def apply_boolean_cut(target_obj, cutter_obj):
    bpy.ops.object.select_all(action='DESELECT')
    cutter_obj.select_set(True)
    target_obj.select_set(True)
    bpy.context.view_layer.objects.active = target_obj

    bool_mod = target_obj.modifiers.new(name="TextIDCut", type='BOOLEAN')
    bool_mod.operation = 'DIFFERENCE'
    bool_mod.object = cutter_obj
    bpy.ops.object.modifier_apply(modifier=bool_mod.name)

    bpy.data.objects.remove(cutter_obj, do_unlink=True)

def save_as_stl(obj, folder_path, filename):
    # Make sure folder exists
    os.makedirs(folder_path, exist_ok=True)
    
    # Export selected object as STL
    bpy.ops.object.select_all(action='DESELECT')
    obj.select_set(True)
    bpy.context.view_layer.objects.active = obj
    
    filepath = os.path.join(folder_path, filename + ".stl")
    bpy.ops.wm.stl_export(filepath=filepath)
    
    print(f"Saved STL to: {filepath}")
    return filepath

def main():
    unique_id = generate_unique_id()
    print("Generated ID:", unique_id)

    target_obj = get_target_object("Murgagon")

    # Store original mesh data to restore later
    original_mesh = target_obj.data.copy()

    bottom_center = get_bottom_center(target_obj)
    text_location = bottom_center + Vector((0, 0, 0.05))  # Slight offset

    text_obj = create_text_object(unique_id, text_location)
    apply_boolean_cut(target_obj, text_obj)

    # Save result
    home_dir = os.path.expanduser("~")
    save_folder = os.path.join(home_dir, "finishedMurgagons")
    save_as_stl(target_obj, save_folder, unique_id)

    # Restore original mesh (reset object to before boolean)
    target_obj.data = original_mesh
    print("Restored original Murgagon mesh.")

main()
